first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
#2 Variance of means
n <- 3
m <- 1000
# Find means of m samples of n
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
# Variance of means
variance <- var(means)
# What happens if we make sample size larger?
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_variance <- var(new_means)
# The variance is much smaller!
# How much smaller will standard deviation be if the sample is 10x larger?
first_sd <- sd(means)
second_n <- n * 10
second_means <- sapply(replicate(m, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sd <- sd(second_means)
difference <- first_sd / second_sd
difference
# The new standard deviation will be around 3x smaller than the first standard deviation
comb <- paste(a, b)
a <- "hello"
b <- "name"
comb <- paste(a, b)
comb
comb
print(comb)
g <- "1"
p <- as.numeric(g)
p
n <- 3
m <- 1000
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
variance <- var(means)
new_n <- n * 100
sample_mean <- mean(means)
new_sample_mean <- mean(new_means)
new_n <- n * 100
new_means <- sapply(replicate(m, sapply(new_n, rnorm, simplify = FALSE)), mean)
new_sample_mean <- mean(new_means)
new_variance <- var(new_means)
n <- 10
r <- 1000
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
first_sd <- sd(means)
means <- sapply(replicate(m, sapply(n, rnorm, simplify = FALSE)), mean)
n <- 10
r <- 1000
means <- sapply(replicate(r, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
first_sd <- sd(means)
second_n <- n * 100
second_means <- sapply(replicate(r, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sample_mean <- mean(second_means) # New mean is closer to 0
second_variance <- var(second_means) # New variance is much smaller
second_sd <- sd(second_means)
difference <- first_sd / second_sd
third_n <- n * 100
third_means <- sapply(replicate(r, sapply(third_n, rnorm, simplify = FALSE)), mean)
third_sample_mean <- mean(third_means) # New mean is closer to 0
third_variance <- var(third_means) # New variance is much smaller
third_sd <- sd(third_means)
third_difference <- first_sd / third_sd
sample_mean
second_sample_mean
second_means
third_sample_mean
second_sample_mean
third_n <- second_n * 100
third_means <- sapply(replicate(r, sapply(third_n, rnorm, simplify = FALSE)), mean)
third_sample_mean <- mean(third_means) # New mean is closer to 0
third_variance <- var(third_means) # New variance is much smaller
third_sd <- sd(third_means)
third_difference <- first_sd / third_sd
third_sample_mean
second_variance
third_variance
difference
# 1.1 Normal Distribution
n <- 10
r <- 1000
# Find means of m samples of n
means <- sapply(replicate(r, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
first_sd <- sd(means)
# What happens if we make sample size larger?
# n = 1,000
second_n <- n * 100
second_means <- sapply(replicate(r, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sample_mean <- mean(second_means) # New mean is closer to 0
second_variance <- var(second_means) # New variance is much smaller
second_sd <- sd(second_means)
difference <- first_sd / second_sd
# The new standard deviation will be around 3x smaller than the first standard deviation
# 1.1 Normal Distribution
n <- 10
r <- 1000
# Find means of m samples of n
means <- sapply(replicate(r, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
first_sd <- sd(means)
# What happens if we make sample size larger?
# n = 1,000
second_n <- n * 100
second_means <- sapply(replicate(r, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sample_mean <- mean(second_means) # New mean is closer to 0
second_variance <- var(second_means) # New variance is much smaller
second_sd <- sd(second_means)
difference <- first_sd / second_sd
# The new standard deviation will be around 3x smaller than the first standard deviation
# 1.1 Normal Distribution
n <- 10
r <- 1000
# Find means of m samples of n
means <- sapply(replicate(r, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
first_sd <- sd(means)
# What happens if we make sample size larger?
# n = 1,000
second_n <- n * 100
second_means <- sapply(replicate(r, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sample_mean <- mean(second_means) # New mean is closer to 0
second_variance <- var(second_means) # New variance is much smaller
second_sd <- sd(second_means)
difference <- first_sd / second_sd
# The new standard deviation will be around 3x smaller than the first standard deviation
# 1.1 Normal Distribution
n <- 10
r <- 1000
# Find means of m samples of n
means <- sapply(replicate(r, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
first_sd <- sd(means)
# What happens if we make sample size larger?
# n = 1,000
second_n <- n * 100
second_means <- sapply(replicate(r, sapply(second_n, rnorm, simplify = FALSE)), mean)
second_sample_mean <- mean(second_means) # New mean is closer to 0
second_variance <- var(second_means) # New variance is much smaller
second_sd <- sd(second_means)
difference <- first_sd / second_sd
# The new standard deviation will be around 3x smaller than the first standard deviation
third_difference <- first_sd / third_sd
third_difference <- second_sd / third_sd # 10x
quantile(means, 10)
quantile(sample_mean, 10)
means
quantile(means, 5)
quantile(means, 0.1)
quantile(means, 0)
lower <- quantile(means, 0.05)
lower
upper <- quantile(means, 0.95)
upper
second_lower <- quantile(second_means, 0.05)
second_upper <- quantile(second_means, 0.95)
second_lower
second_upper
third_lower <- quantile(third_means, 0.05)
third_upper <- quantile(third_means, 0.95)
third_lower
third_upper
install.packages(VGAM)
install.packages("VGAM")
install.packages("VGAM")
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, k) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
n <- 10
r <- 1000
# Find means of r samples of n
means <- sapply(replicate(r, sapply(n, rnorm, simplify = FALSE)), mean)
sample_mean <- mean(means)
variance <- var(means)
sd <- sd(means)
lower <- quantile(means, 0.05)
upper <- quantile(means, 0.95)
n2 <- n * 100
means2 <- sapply(replicate(r, sapply(n2, rnorm, simplify = FALSE)), mean)
sample_mean2 <- mean(means2) # New mean is closer to 0
variance2 <- var(means2) # New variance is much smaller
sd2 <- sd(means2)
difference <- sd / sd2
# 95% CI bounds are smaller because means are closer to 0
lower2 <- quantile(means2, 0.05)
upper2 <- quantile(means2, 0.95)
n3 <- n2 * 100
means3 <- sapply(replicate(r, sapply(n3, rnorm, simplify = FALSE)), mean)
sample_mean3 <- mean(means3) # New mean is closer to 0
variance3 <- var(means3) # New variance is much smaller
sd3 <- sd(means3)
difference2 <- sd2 / sd3 # 10x smaller than second sd
# 95% CI bounds even smaller
lower3 <- quantile(means3, 0.05)
upper3 <- quantile(means3, 0.95)
library(VGAM)
k1 <- 1
k2 <- 10
k3 <- 1000
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k3)
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k1)
make_hist(k2)
make_hist(k3)
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, shape = exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k3)
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, shape = exp(k)) # where n = 10,000
hist(sample, col = "light blue", log = TRUE, main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, log = TRUE, shape = exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k3)
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, p.log = TRUE, shape = exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k3)
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, shape = exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k3)
k1 <- 1
k2 <- 10
k3 <- 100
# Function to make pareto histogram
# TODO: make it log~log scale
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, shape = exp(k)) # where n = 10,000
hist(sample, col = "light blue", main = paste("Histogram where k =", k))
abline(v = mean(sample), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k3)
wvs <- read.delim("../data/wvs.csv.bz2")
setwd("~/Desktop/INFO371/Lab 3")
wvs <- read.delim("../data/wvs.csv.bz2")
wvs <- read.delim("wvs.csv.bz2")
View(wvs)
m <- lm(y ~ x + z, data=wvs)
m <- lm(choice ~ country, data=wvs)
View(m)
summary(m)
View(m)
knitr::opts_chunk$set(echo = TRUE)
wvs <- read.delim("wvs.csv.bz2")
wvs <- read.delim("wvs.csv.bz2")
m <- lm(choice ~ country, data=wvs)
m <- lm(choice ~ country, data=wvs)
summary(m)
m <- lm(sex ~ country, data=wvs)
m2 <- lm(sex ~ country, data=wvs)
m <- lm(choice ~ country, data=wvs)
m2 <- lm(as.numeric(sex) ~ country, data=wvs)
as.numeric(wvs$sex)
m2 <- lm(as.numeric(sex) ~ country, data=wvs)
summary(m)
m2 <- lm(choice ~ as.numeric(sex), data=wvs)
summary(m2)
m2 <- lm(choice ~ sex, data=wvs)
summary(m2)
m2 <- lm(choice ~ sex + country, data=wvs)
summary(m2)
m3 <- lm(choice ~ sex * country, data = wvs)
summary(m3)
setwd("~/Desktop/INFO371/PS1")
knitr::opts_chunk$set(echo = TRUE)
library(VGAM)
k1 <- 1
k2 <- 10
k3 <- 100
make_hist <- function(k) {
sample <- rpareto(10000, scale = 1, k) # where n = 10,000
hist(log10(sample), col = "light blue", main = paste("Histogram where k =", k))
abline(v = log10(mean(sample)), col = "blue")
}
make_hist(k1)
make_hist(k2)
make_hist(k1)
make_hist(k2)
make_hist(k3)
make_hist(k2)
make_hist(k1)
make_hist(k1)
make_hist(k2)
make_hist(k3)
